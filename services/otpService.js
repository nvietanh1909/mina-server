const nodemailer = require('nodemailer');
const crypto = require('crypto');
const OTP = require('../models/otpModel');
const User = require('../models/userModel');

class OTPService {
    constructor() {
      // Kh·ªüi t·∫°o nodemailer transporter
      this.transporter = nodemailer.createTransport({
        service: 'gmail',
        auth: {
          user: process.env.EMAIL_USER,
          pass: process.env.EMAIL_PASS
        }
      });
    }
  
    // T·∫°o m√£ OTP 6 ch·ªØ s·ªë
    generateOTP() {
      return crypto.randomInt(100000, 999999).toString();
    }

    // Validate email format
    validateEmail(email) {
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      return emailRegex.test(email);
    }

    // Ki·ªÉm tra email t·ªìn t·∫°i
    async checkEmailExists(email) {
      try {
        const user = await User.findOne({ email: email.toLowerCase() });
        return user !== null;
      } catch (error) {
        console.error('L·ªói khi ki·ªÉm tra email:', error);
        return false;
      }
    }
  
    // L∆∞u OTP v√†o database
    async saveOTP(email, otp) {
      try {
        // X√≥a c√°c OTP c≈© c·ªßa email n√†y
        await OTP.deleteMany({ email });
        
        // T·∫°o OTP m·ªõi
        const otpData = new OTP({
          email,
          otp,
          createdAt: new Date()
        });
        
        await otpData.save();
        
        // Log th√¥ng tin ƒë·ªÉ ki·ªÉm tra
        console.log('ƒê√£ l∆∞u OTP:', {
          email,
          otpId: otpData._id,
          createdAt: otpData.createdAt
        });
        
        return true;
      } catch (error) {
        console.error('L·ªói khi l∆∞u OTP:', error);
        return false;
      }
    }
  
    // G·ª≠i OTP qua email
    async sendOTPByEmail(email, isRegistration = false) {
      try {
        // Validate email
        if (!this.validateEmail(email)) {
          return {
            success: false,
            message: 'Email kh√¥ng h·ª£p l·ªá'
          };
        }

        // Ki·ªÉm tra email t·ªìn t·∫°i
        const emailExists = await this.checkEmailExists(email);
        if (isRegistration && emailExists) {
          return {
            success: false,
            message: 'Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng. Vui l√≤ng s·ª≠ d·ª•ng email kh√°c.'
          };
        }
        if (!isRegistration && !emailExists) {
          return {
            success: false,
            message: 'Email ch∆∞a ƒë∆∞·ª£c ƒëƒÉng k√Ω. Vui l√≤ng ƒëƒÉng k√Ω t√†i kho·∫£n tr∆∞·ªõc.'
          };
        }

        // T·∫°o m√£ OTP
        const otp = this.generateOTP();
  
        // L∆∞u OTP v√†o database
        const saved = await this.saveOTP(email, otp);
        if (!saved) {
          return {
            success: false,
            message: 'Kh√¥ng th·ªÉ l∆∞u OTP'
          };
        }
  
        // C·∫•u h√¨nh email
        const mailOptions = {
          from: {
            name: 'Mina',
            address: process.env.EMAIL_USER
          },
          to: email,
          subject: isRegistration ? 'M√£ OTP ƒêƒÉng K√Ω T√†i Kho·∫£n' : 'M√£ OTP X√°c Th·ª±c',
          html: `
           <div style="background-color: #f5f5f5; padding: 40px 20px;">
                <div style="max-width: 500px; margin: 0 auto; background-color: #ffffff; border-radius: 8px; padding: 40px 30px; box-shadow: 0 2px 10px rgba(0,0,0,0.08);">
                    <!-- Header -->
                    <div style="text-align: center; margin-bottom: 30px;">
                        <h1 style="color: #2c3e50; margin: 0; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; font-size: 24px; font-weight: 600;">
                            ${isRegistration ? 'ƒêƒÉng K√Ω T√†i Kho·∫£n' : 'X√°c Th·ª±c T√†i Kho·∫£n'}
                        </h1>
                    </div>

                    <!-- Main Content -->
                    <div style="text-align: center;">
                        <p style="color: #4a5568; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; font-size: 15px; line-height: 1.6; margin-bottom: 25px;">
                            Vui l√≤ng s·ª≠ d·ª•ng m√£ OTP b√™n d∆∞·ªõi ƒë·ªÉ ${isRegistration ? 'ƒëƒÉng k√Ω' : 'x√°c th·ª±c'} t√†i kho·∫£n c·ªßa b·∫°n
                        </p>
                        
                        <!-- OTP Box -->
                        <div style="background-color: #f8fafc; padding: 20px; border-radius: 6px; border: 1px solid #e2e8f0; margin: 25px 0;">
                            <h2 style="color: #1a202c; font-family: 'Courier New', monospace; letter-spacing: 8px; font-size: 32px; margin: 0; font-weight: 600;">
                                ${otp}
                            </h2>
                        </div>

                        <!-- Timer -->
                        <p style="color: #64748b; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; font-size: 14px; margin: 15px 0;">
                            ‚è∞ M√£ c√≥ hi·ªáu l·ª±c trong 10 ph√∫t
                        </p>

                        <!-- Security Note -->
                        <div style="margin-top: 30px; border-top: 1px solid #e2e8f0; padding-top: 20px;">
                            <p style="color: #64748b; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; font-size: 13px; line-height: 1.5; margin: 0; text-align: center;">
                                üîí Kh√¥ng chia s·∫ª m√£ n√†y v·ªõi b·∫•t k·ª≥ ai, k·ªÉ c·∫£ nh√¢n vi√™n Mina
                            </p>
                        </div>
                    </div>
                </div>
            </div>
          `
        };
  
        // G·ª≠i email
        const sendResult = await this.transporter.sendMail(mailOptions);
        console.log('Chi ti·∫øt g·ª≠i email:', sendResult);
  
        return { 
          success: true, 
          message: 'OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng',
          messageId: sendResult.messageId
        };
      } catch (error) {
        console.error('L·ªói khi g·ª≠i OTP:', error);
        return { 
          success: false, 
          message: 'Kh√¥ng th·ªÉ g·ª≠i OTP',
          error: error.message 
        };
      }
    }
  
    // X√°c th·ª±c OTP
    async verifyOTP(email, userProvidedOTP) {
      try {
        // L·∫•y OTP t·ª´ database
        const otpData = await OTP.findOne({ 
          email,
          isVerified: false
        }).sort({ createdAt: -1 });

        if (!otpData) {
          return { 
            success: false, 
            message: 'Kh√¥ng t√¨m th·∫•y OTP ho·∫∑c OTP ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng' 
          };
        }

        // TƒÉng s·ªë l·∫ßn th·ª≠
        otpData.attempts += 1;
        await otpData.save();

        // Ki·ªÉm tra s·ªë l·∫ßn th·ª≠
        if (otpData.attempts > 3) {
          await OTP.deleteOne({ _id: otpData._id });
          return {
            success: false,
            message: 'Qu√° nhi·ªÅu l·∫ßn th·ª≠ kh√¥ng th√†nh c√¥ng. Vui l√≤ng y√™u c·∫ßu m√£ OTP m·ªõi.'
          };
        }

        // Ki·ªÉm tra OTP
        if (otpData.otp !== userProvidedOTP) {
          return { 
            success: false, 
            message: 'OTP kh√¥ng ch√≠nh x√°c' 
          };
        }

        // ƒê√°nh d·∫•u OTP ƒë√£ ƒë∆∞·ª£c x√°c th·ª±c
        otpData.isVerified = true;
        await otpData.save();

        return { 
          success: true, 
          message: 'OTP x√°c th·ª±c th√†nh c√¥ng' 
        };
      } catch (error) {
        console.error('L·ªói khi x√°c th·ª±c OTP:', error);
        return { 
          success: false, 
          message: 'L·ªói x√°c th·ª±c OTP',
          error: error.message 
        };
      }
    }
  }
  
module.exports = OTPService;